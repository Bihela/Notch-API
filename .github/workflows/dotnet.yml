name: UATNotchAPI

on:
  push:
    branches: [ "Developement" ]
  pull_request:
    branches: [ "Developement" ]
  workflow_dispatch: # Manual trigger added

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Specify your .NET version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests for main project
      run: dotnet test --no-restore --verbosity normal

    - name: Run tests for test project
      run: dotnet test NotchApiTest/NotchApiTest.csproj --no-restore --verbosity normal

    - name: Publish
      run: dotnet publish --configuration Release --output ./output # Specify the output directory

    - name: Check Output Directory (Debugging step)
      run: |
        ls -la ./output

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-api
        path: ./output/** # Ensure the output files are included in the artifacts

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dotnet-api
        path: .  # Download to current working directory

    - name: Configure TrustedHosts for WinRM
      run: |
        # Allow the EC2 instance to accept connections from GitHub Actions
        Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value "${{ secrets.EC2_HOST }}" -Force

    - name: Deploy to EC2 via WinRM
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_PASSWORD: ${{ secrets.EC2_PASSWORD }}
      run: |
        # Set up WinRM session credentials
        $secPassword = ConvertTo-SecureString $env:EC2_PASSWORD -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ($env:EC2_USER, $secPassword)

        # Start a WinRM session
        $session = New-PSSession -ComputerName $env:EC2_HOST -Credential $credential

        # Copy build artifacts to the target path on the EC2 instance
        Copy-Item -Path .\** -Destination 'C:\inetpub\wwwroot\UATNotchAPI' -ToSession $session -Recurse -Force

        # Restart the API service (replace 'NotchApiService' with the actual service name)
        Invoke-Command -Session $session -ScriptBlock { Restart-Service -Name 'NotchApiService' }

        # End the WinRM session
        Remove-PSSession -Session $session
