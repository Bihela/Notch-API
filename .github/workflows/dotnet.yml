name: UATNotchAPI

on:
  push:
    branches: [ "Developement" ]
  pull_request:
    branches: [ "Developement" ]
  workflow_dispatch: # Manual trigger added

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests for main project
      run: dotnet test --no-restore --verbosity normal

    - name: Run tests for test project
      run: dotnet test NotchApiTest/NotchApiTest.csproj --no-restore --verbosity normal

    - name: Publish
      run: dotnet publish --configuration Release --output ./output

    - name: Check Output Directory (Debugging step)
      run: |
        ls -la ./output

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-api
        path: ./output/**

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dotnet-api
        path: .

    - name: Configure TrustedHosts for WinRM
      run: |
        Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value "${{ secrets.EC2_HOST }}" -Force

    - name: Deploy to EC2 via WinRM
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_PASSWORD: ${{ secrets.EC2_PASSWORD }}
      run: |
        $secPassword = ConvertTo-SecureString $env:EC2_PASSWORD -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ($env:EC2_USER, $secPassword)
        $session = New-PSSession -ComputerName $env:EC2_HOST -Credential $credential

        # Stop the service and wait for processes to release the files
        Invoke-Command -Session $session -ScriptBlock {
          Stop-Service -Name 'UATNotchApiService' -Force
          
          # Ensure all processes accessing files are terminated
          Start-Sleep -Seconds 5  # Wait briefly for services to stop completely
          $processes = Get-Process | Where-Object { $_.Modules.ModuleName -like '*NotchAPI*' } -ErrorAction SilentlyContinue
          if ($processes) {
            $processes | ForEach-Object { Stop-Process -Id $_.Id -Force }
          }
          Start-Sleep -Seconds 5  # Ensure processes are completely terminated
        }

        # Copy build artifacts to the target path
        Copy-Item -Path .\* -Destination 'C:\inetpub\wwwroot\UATNotchAPI' -ToSession $session -Recurse -Force -ErrorAction Stop

        # Restart the service
        Invoke-Command -Session $session -ScriptBlock {
          Start-Service -Name 'UATNotchApiService'
        }

        Remove-PSSession -Session $session
