name: UATNotchAPI

on:
  push:
    branches: [ "Developement" ]
  pull_request:
    branches: [ "Developement" ]
  workflow_dispatch:   # Manual trigger added

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Specify your .NET version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests for main project
      run: dotnet test --no-restore --verbosity normal

    - name: Run tests for test project
      run: dotnet test NotchApiTest/NotchApiTest.csproj --no-restore --verbosity normal

    - name: Publish
      run: dotnet publish --configuration Release --output ./output

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3  # Updated to v3
      with:
        name: dotnet-api
        path: ./output

  deploy:
    runs-on: ubuntu-latest  # Use ubuntu-latest for SSH
    needs: build
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dotnet-api

    - name: Deploy to EC2 via SSH
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Create the SSH key file
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Copy files to EC2
        scp -o StrictHostKeyChecking=no -i private_key.pem -r ./output/* $EC2_USER@$EC2_HOST:C:/inetpub/wwwroot/UATNotchAPI

        # Restart the service
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "powershell -Command 'Restart-Service -Name NotchApiService'"

        # Cleanup
        rm private_key.pem
